name: test
on: push

jobs:
  get_app_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set env vars
        id: set_env_vars
        shell: pwsh
        run: |
          $env:APP_VERSION = git describe --tags --always --first-parent --abbrev=0
          $env:APP_VERSION_LONG = git describe --tags --always --first-parent --abbrev=4 --long

          if ( $env:APP_VERSION[0] -eq 'v' ) {
              # remove leading "v" from version if there's any
              $env:APP_VERSION = $env:APP_VERSION.substring(1)
          }

          if ( $env:APP_VERSION_LONG[0] -eq 'v' ) {
              # remove leading "v" from version if there's any
              $env:APP_VERSION_LONG = $env:APP_VERSION_LONG.substring(1)
          }

          echo "Setting $$env:APP_VERSION to: $env:APP_VERSION"
          echo "Setting $$env:APP_VERSION_LONG to: $env:APP_VERSION_LONG"

          # exposes vars to github action output
          echo "::set-output name=AppVersion::$env:APP_VERSION"
          echo "::set-output name=AppVersionLong::$env:APP_VERSION_LONG"

    outputs:
      AppVersion: ${{ steps.set_env_vars.outputs.AppVersion }}
      AppVersionLong: ${{ steps.set_env_vars.outputs.AppVersionLong }}

  build_frontend:
    runs-on: ubuntu-latest
    needs: [get_app_version]
    env:
      APP_VERSION: ${{ needs.get_app_version.outputs.AppVersion }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: echo
        run: |
          ls
          echo "$$APP_VERSION is: $APP_VERSION"
          echo "$$APP_VERSION_LONG is: $APP_VERSION_LONG"

      - name: run python
        run: |
          python test.py
